const {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} = require("@google/generative-ai");

const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-1.5-flash",
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "application/json",
};
const generationConfig2 = {
  temperature: 1,
  topp: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "text/plain" ,
}

  export const courseOutline = model.startChat({
    generationConfig,
     history: [
      {
        role: "user",
        parts: [
          {text: "Generate a study material for pytho  for exam and level of difficulty will be easy with summery of course, List of Chapters (Atleast 8 chapters) along with summery and Emoji icon for each chapter for each chapter sepratly(do not add emoji in chapter_title and generate emoji in json like this  \"emoji\": \"➕\"), Topic list in each chapter, all result in JSON format"},
        ],
      },
      {
        role: "model",
        parts: [
          {text: "```json\n{\n  \"course_title\": \"Python for Beginners: Exam Study Guide\",\n  \"course_difficulty\": \"Easy\",\n  \"course_summary\": \"This study guide provides a foundational understanding of Python programming, covering basic syntax, data structures, control flow, functions, and object-oriented programming principles. It's designed for individuals with little to no prior programming experience aiming to pass a beginner-level Python exam.\",\n  \"chapters\": [\n    {\n      \"chapter_title\": \"Introduction to Python\",\n      \"emoji\": \"🐍\",\n      \"chapter_summary\": \"This chapter introduces Python's history, features, installation, and basic syntax.  It covers the core principles of writing simple Python programs.\",\n      \"topics\": [\n        \"What is Python?\",\n        \"History and features of Python\",\n        \"Installing Python and setting up the development environment\",\n        \"Basic syntax: variables, comments, and indentation\",\n        \"Running your first Python program\"\n      ]\n    },\n    {\n      \"chapter_title\": \"Data Types and Variables\",\n      \"emoji\": \"🔢\",\n      \"chapter_summary\": \"This chapter explains fundamental data types in Python, including integers, floats, strings, and booleans. It also covers variable assignment and operations.\",\n      \"topics\": [\n        \"Integers (int)\",\n        \"Floating-point numbers (float)\",\n        \"Strings (str)\",\n        \"Booleans (bool)\",\n        \"Variable assignment and naming conventions\",\n        \"Basic arithmetic operations (+, -, *, /, %)\",\n        \"Type conversion (casting)\"\n      ]\n    },\n    {\n      \"chapter_title\": \"Operators\",\n      \"emoji\": \"➕\",\n      \"chapter_summary\": \"Learn about different types of operators in Python, including arithmetic, comparison, logical, and assignment operators.\",\n      \"topics\": [\n        \"Arithmetic operators (+, -, *, /, %, //, **)\",\n        \"Comparison operators (==, !=, >, <, >=, <=)\",\n        \"Logical operators (and, or, not)\",\n        \"Assignment operators (=, +=, -=, *=, /=)\",\n        \"Operator precedence\"\n      ]\n    },\n    {\n      \"chapter_title\": \"Control Flow: Conditional Statements\",\n      \"emoji\": \"🚦\",\n      \"chapter_summary\": \"This chapter covers conditional statements (if, elif, else) to control the execution flow of your programs based on conditions.\",\n      \"topics\": [\n        \"The `if` statement\",\n        \"The `if-else` statement\",\n        \"The `if-elif-else` statement\",\n        \"Nested `if` statements\",\n        \"Using comparison and logical operators in conditional statements\"\n      ]\n    },\n    {\n      \"chapter_title\": \"Control Flow: Loops\",\n      \"emoji\": \"🔄\",\n      \"chapter_summary\": \"Learn about `for` and `while` loops for iterating over sequences and repeating code blocks. Includes `break` and `continue` statements.\",\n      \"topics\": [\n        \"The `for` loop\",\n        \"Iterating over strings and lists\",\n        \"The `while` loop\",\n        \"The `break` statement\",\n        \"The `continue` statement\",\n        \"Nested loops\"\n      ]\n    },\n    {\n      \"chapter_title\": \"Data Structures: Lists\",\n      \"emoji\": \"📃\",\n      \"chapter_summary\": \"This chapter introduces lists, a versatile data structure for storing ordered collections of items. Covers list operations and methods.\",\n      \"topics\": [\n        \"Creating lists\",\n        \"Accessing list elements (indexing)\",\n        \"Slicing lists\",\n        \"List methods (append, insert, remove, pop, len, sort)\",\n        \"List comprehension (optional intro)\",\n        \"Iterating over lists\"\n      ]\n    },\n    {\n      \"chapter_title\": \"Data Structures: Strings\",\n      \"emoji\": \"🔤\",\n      \"chapter_summary\": \"Learn about strings and common string operations, including slicing, concatenation, formatting, and built-in string methods.\",\n      \"topics\": [\n        \"Creating strings\",\n        \"String indexing and slicing\",\n        \"String concatenation\",\n        \"String formatting (using f-strings)\",\n        \"String methods (upper, lower, strip, find, replace, split)\"\n      ]\n    },\n    {\n      \"chapter_title\": \"Functions\",\n      \"emoji\": \"⚙️\",\n      \"chapter_summary\": \"This chapter teaches how to define and call functions, pass arguments, return values, and understand scope.\",\n      \"topics\": [\n        \"Defining functions using `def`\",\n        \"Calling functions\",\n        \"Function arguments (positional and keyword)\",\n        \"Return values\",\n        \"Variable scope (local and global)\",\n        \"Docstrings\"\n      ]\n    },\n     {\n      \"chapter_title\": \"Input and Output\",\n      \"emoji\": \"⌨️\",\n      \"chapter_summary\": \"This chapter teaches how to take user input and Print Out put\",\n      \"topics\": [\n        \"input() function\",\n        \"print() function\",\n        \"String formatting\",\n        \"Reading and Writing to file\"\n      ]\n    },\n\n    {\n      \"chapter_title\": \"Error Handling\",\n      \"emoji\": \"❗\",\n      \"chapter_summary\": \"This chapter introduces error handling using try-except blocks to gracefully handle exceptions.\",\n      \"topics\": [\n        \"Types of errors (SyntaxError, NameError, TypeError, ValueError, ZeroDivisionError)\",\n        \"The `try-except` block\",\n        \"Handling specific exceptions\",\n        \"The `finally` block (optional)\"\n      ]\n    }\n  ]\n}\n```\n"},
        ],
      },
    ],
  });

  export const generateNotes = model.startChat({
    generationConfig2,
    history: [
      {
        role: "user",
        parts: [
          {text: "Generate exam material with detailed content for each chapter. Ensure all topic points are covered thoroughly. Format the output using proper HTML structure:Use <h1> for chapter titles. Use <h2> for subheadings (topics within the chapter). Use <code> and <pre> tags for code snippets and examples. Ensure well-structured and readable content. and make sure to givy content in HTML format (Do not Add HTML , Head, Body, title tag) The chapters:{\n{\n  \"course_title\": \"Intermediate Python Practice Problems\",\n  \"course_difficulty\": \"Moderate\",\n  \"course_summary\": \"This study material focuses on practical application of Python concepts at an intermediate level. Each chapter presents a set of progressively challenging problems designed to reinforce understanding and build problem-solving skills.  Solutions are not provided within this document to encourage independent thinking and debugging.\",\n  \"chapters\": [\n    {\n      \"chapter_title\": \"List Manipulation and Algorithms\",\n      \"emoji\": \"🧮\",\n      \"chapter_summary\": \"Practice manipulating lists efficiently, working with nested lists, and implementing common algorithms.\",\n      \"topics\": [\n        \"List comprehensions for complex list creation and filtering\",\n        \"Implementing sorting algorithms (bubble sort, insertion sort)\",\n        \"Searching algorithms (linear search, binary search)\",\n        \"Working with multidimensional lists\",\n        \"List manipulation challenges: removing duplicates, finding the largest/smallest element\"\n      ]\n    },\n}"},
        ],
      },
      {
        role: "model",
        parts: [
          {text: "<h1>List Manipulation and Algorithms 🧮</h1>\n\n<h2>List Comprehensions for Complex List Creation and Filtering</h2>\n<p>List comprehensions provide a concise way to create lists.  Practice creating lists using comprehensions that involve conditional logic and nested loops. For example, create a list of squares of even numbers from a given range.</p>\n\n<pre><code>\nnumbers = range(1, 21)\neven_squares = [x**2 for x in numbers if x % 2 == 0]\nprint(even_squares)\n</code></pre>\n\n<p>Another example: Filter a list of strings to keep only those starting with a specific letter.</p>\n\n<pre><code>\nstrings = [\"apple\", \"banana\", \"apricot\", \"avocado\"]\na_strings = [s for s in strings if s.startswith('a')]\nprint(a_strings)\n</code></pre>\n\n\n<h2>Implementing Sorting Algorithms (Bubble Sort, Insertion Sort)</h2>\n<p>Implement the Bubble Sort and Insertion Sort algorithms.  Focus on understanding the logic and steps involved in each algorithm.  Consider the time and space complexity of each.</p>\n\n<p><strong>Bubble Sort:</strong></p>\n<pre><code>\ndef bubble_sort(list_):\n    n = len(list_)\n    for i in range(n-1):\n        for j in range(n-i-1):\n            if list_[j] > list_[j+1]:\n                list_[j], list_[j+1] = list_[j+1], list_[j]\n    return list_\n\nmy_list = [64, 34, 25, 12, 22, 11, 90]\nsorted_list = bubble_sort(my_list)\nprint(\"Sorted array:\", sorted_list)\n</code></pre>\n\n<p><strong>Insertion Sort:</strong></p>\n<pre><code>\ndef insertion_sort(list_):\n    for i in range(1, len(list_)):\n        key = list_[i]\n        j = i-1\n        while j >= 0 and key < list_[j] :\n                list_[j + 1] = list_[j]\n                j -= 1\n        list_[j + 1] = key\n    return list_\n\nmy_list = [64, 34, 25, 12, 22, 11, 90]\nsorted_list = insertion_sort(my_list)\nprint(\"Sorted array:\", sorted_list)\n</code></pre>\n\n\n<h2>Searching Algorithms (Linear Search, Binary Search)</h2>\n<p>Implement Linear Search and Binary Search algorithms.  Understand when each algorithm is most appropriate (sorted vs. unsorted data).</p>\n\n<p><strong>Linear Search:</strong></p>\n<pre><code>\ndef linear_search(list_, target):\n    for i, num in enumerate(list_):\n        if num == target:\n            return i\n    return -1\n\nmy_list = [2, 5, 7, 1, 9, 3]\ntarget = 7\nindex = linear_search(my_list, target)\nprint(f\"Element {target} is at index {index}\")\n</code></pre>\n\n<p><strong>Binary Search (requires a sorted list):</strong></p>\n<pre><code>\ndef binary_search(list_, target):\n    low = 0\n    high = len(list_) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if list_[mid] == target:\n            return mid\n        elif list_[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\nmy_list = [1, 2, 3, 5, 7, 9] # Must be sorted\ntarget = 7\nindex = binary_search(my_list, target)\nprint(f\"Element {target} is at index {index}\")\n</code></pre>\n\n\n<h2>Working with Multidimensional Lists</h2>\n<p>Practice manipulating multidimensional lists (lists of lists).  Examples include accessing elements, iterating through rows and columns, and performing operations on sublists.</p>\n\n<pre><code>\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(matrix[1][2]) # Accessing element at row 1, column 2 (6)\n\nfor row in matrix:\n    print(row) # Iterating through rows\n\n#Sum of all elements in the matrix\ntotal_sum = sum(sum(row) for row in matrix)\nprint(f\"Sum of all elements:{total_sum}\")\n</code></pre>\n\n\n<h2>List Manipulation Challenges: Removing Duplicates, Finding the Largest/Smallest Element</h2>\n<p>Solve challenges involving list manipulation:  Write functions to remove duplicate elements from a list, find the largest and smallest elements in a list, and potentially find the kth largest/smallest element.</p>\n\n<pre><code>\n#Removing Duplicates (using a set)\ndef remove_duplicates(list_):\n  return list(set(list_))\n\nmy_list = [1, 2, 2, 3, 4, 4, 5]\nunique_list = remove_duplicates(my_list)\nprint(f\"List without duplicates: {unique_list}\")\n\n#Finding the largest element\ndef find_largest(list_):\n  return max(list_)\n\nmy_list = [1, 5, 2, 8, 3]\nlargest = find_largest(my_list)\nprint(f\"Largest element: {largest}\")\n</code></pre>\n\n<p>Remember to attempt solving these problems independently before looking for solutions online.  This will significantly enhance your understanding and problem-solving abilities.</p>\n"},
        ],
      },
    ],
  });

  export const GenerateStudyTypeContentAiModel = model.startChat({
    generationConfig,
    history: [
      {
        role: "user",
        parts: [
          {text: "Generate the flashcard on topic : Flutter\nFundamentals. Usel Interface (U l)\ndevelopment,Basic App Navigation in\n'SON format with front back content.\nMaximum 15"},
        ],
      },
      {
        role: "model",
        parts: [
          {text: "```json\n[\n  {\n    \"front\": \"What is Flutter?\",\n    \"back\": \"Flutter is Google's UI toolkit for building natively compiled applications for mobile, web, and desktop from a single codebase.\"\n  },\n  {\n    \"front\": \"What is a Widget in Flutter?\",\n    \"back\": \"Everything in Flutter is a widget.  Widgets are the fundamental building blocks of the UI, representing elements like text, images, buttons, and layouts.\"\n  },\n  {\n    \"front\": \"Explain the difference between StatelessWidget and StatefulWidget.\",\n    \"back\": \"StatelessWidget:  A widget that doesn't change after it's built. StatefulWidget: A widget that can change its state, requiring rebuilding.\"\n  },\n  {\n    \"front\": \"What is the purpose of `BuildContext`?\",\n    \"back\": \"BuildContext provides information about the widget's position in the widget tree.  It allows access to things like themes and parent widgets.\"\n  },\n  {\n    \"front\": \"Name three common layout widgets in Flutter.\",\n    \"back\": \"Row, Column, Stack\"\n  },\n  {\n    \"front\": \"How do you navigate to a new screen in Flutter?\",\n    \"back\": \"Using `Navigator.push()` or `Navigator.pushNamed()`.\"\n  },\n  {\n    \"front\": \"What is `Navigator.push()` used for?\",\n    \"back\": \"Pushing a new route (screen) onto the navigation stack.  This adds a new screen on top of the current one.\"\n  },\n  {\n    \"front\": \"What is `Navigator.pop()` used for?\",\n    \"back\": \"Removing the current route from the navigation stack, effectively going back to the previous screen.\"\n  },\n  {\n    \"front\": \"What is the role of a `MaterialApp` widget?\",\n    \"back\": \"It provides a default Material Design implementation for your app, including themes and navigation.\"\n  },\n  {\n    \"front\": \"Explain the concept of routing in Flutter.\",\n    \"back\": \"Routing defines how different screens are connected and how navigation between them occurs.  It manages the navigation stack.\"\n  },\n  {\n    \"front\": \"What is a Route in Flutter?\",\n    \"back\": \"A Route represents a single screen or page in your application's navigation history.\"\n  },\n  {\n    \"front\": \"How can you pass data between screens using navigation?\",\n    \"back\": \"By passing arguments to `Navigator.push()` or `Navigator.pushNamed()` using a `RouteSettings` object.\"\n  },\n  {\n    \"front\": \"What is the purpose of `MaterialPageRoute`?\",\n    \"back\": \"It's a type of route that provides a standard Material Design transition animation between screens.\"\n  },\n  {\n    \"front\": \"What is a key benefit of using named routes?\",\n    \"back\": \"Improved code readability and maintainability.  It allows you to refer to routes by name instead of directly creating and pushing routes.\"\n  },\n  {\n    \"front\": \"How do you define named routes in Flutter?\",\n    \"back\": \"Using the `routes` property in `MaterialApp` or by using `onGenerateRoute` to handle route generation dynamically.\"\n  }\n]\n```\n"},
        ],
      },
    ],
  });


 export const GenerateQUizAiModel = model.startChat({
    generationConfig,
    history: [
      {
        role: "user",
        parts: [
          {text: "Generate Quiz on topic : Python Developer Interview Prep: Moderate Level\nwith Question and Options along with\nerect answer in JSON format. (Max 10)"},
        ],
      },
      {
        role: "model",
        parts: [
          {text: "```json\n{\n  \"quiz\": {\n    \"title\": \"Python Developer Interview Prep: Moderate Level\",\n    \"questions\": [\n      {\n        \"question\": \"What is the output of the following code snippet? \\n```python\\nx = 5\\ny = 10\\nprint(x is y)\\n```\",\n        \"options\": [\"True\", \"False\", \"Error\", \"None\"],\n        \"answer\": \"False\"\n      },\n      {\n        \"question\": \"What does the `__name__` variable represent in Python?\",\n        \"options\": [\"The name of the current module\", \"The name of the main function\", \"The name of the current file\", \"The version of Python\"],\n        \"answer\": \"The name of the current module\"\n      },\n      {\n        \"question\": \"Explain the difference between `list.append()` and `list.extend()`.\",\n        \"options\": [\n          \"`append()` adds an element to the end, `extend()` adds multiple elements as separate items.\",\n          \"`append()` adds multiple elements as a single item, `extend()` adds an element to the end.\",\n          \"`append()` adds an element to the beginning, `extend()` adds an element to the end.\",\n          \"Both add multiple elements to the end of the list.\"\n        ],\n        \"answer\": \"`append()` adds an element to the end, `extend()` adds multiple elements as separate items.\"\n      },\n      {\n        \"question\": \"How do you handle exceptions in Python?\",\n        \"options\": [\"Using `try-except` blocks\", \"Using `if-else` statements\", \"Using `for` loops\", \"Using `while` loops\"],\n        \"answer\": \"Using `try-except` blocks\"\n      },\n      {\n        \"question\": \"What is a decorator in Python?\",\n        \"options\": [\n          \"A function that takes another function as input and extends its functionality\",\n          \"A type of loop\",\n          \"A way to define classes\",\n          \"A data structure\"\n        ],\n        \"answer\": \"A function that takes another function as input and extends its functionality\"\n      },\n      {\n        \"question\": \"What is the purpose of the `lambda` keyword?\",\n        \"options\": [\n          \"To create anonymous functions\",\n          \"To define classes\",\n          \"To handle exceptions\",\n          \"To create modules\"\n        ],\n        \"answer\": \"To create anonymous functions\"\n      },\n      {\n        \"question\": \"What is the difference between shallow copy and deep copy?\",\n        \"options\": [\n          \"Shallow copy creates a new object but references the same data, deep copy creates a completely new object with its own data.\",\n          \"Shallow copy creates a completely new object, deep copy does not create a new object.\",\n          \"There is no difference between shallow and deep copy.\",\n          \"Shallow copy is faster than deep copy.\"\n        ],\n        \"answer\": \"Shallow copy creates a new object but references the same data, deep copy creates a completely new object with its own data.\"\n      },\n      {\n        \"question\": \"What does the `yield` keyword do in Python?\",\n        \"options\": [\n          \"Creates a generator\",\n          \"Returns a value from a function\",\n          \"Raises an exception\",\n          \"Defines a class\"\n        ],\n        \"answer\": \"Creates a generator\"\n      },\n      {\n        \"question\": \"How do you create a multi-threaded application in Python?\",\n        \"options\": [\n          \"Using the `threading` module\",\n          \"Using the `multiprocessing` module\",\n          \"Using asynchronous programming with `asyncio`\",\n          \"All of the above\"\n        ],\n        \"answer\": \"All of the above\"\n      },\n      {\n        \"question\": \"What is a Python list comprehension?\",\n        \"options\": [\n          \"A concise way to create lists\",\n          \"A type of loop\",\n          \"A way to define functions\",\n          \"A data structure\"\n        ],\n        \"answer\": \"A concise way to create lists\"\n      }\n    ]\n  }\n}\n```\n"},
        ],
      },
    ],
  });

    const QuetionAnswerAiModel = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "Generate QuestionAnswers on topic : Advanced ReaWorking with APIs,ct Components , State Management with Context API,Forms and User Input,React Router, Testing React Components,Advanced Styling in React,State Management with Redux (optional),Deployment, with Question and answer in JSON format. (Max 20)"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n[\n  {\n    \"question\": \"Explain the concept of controlled components in React and how they differ from uncontrolled components.\",\n    \"answer\": \"Controlled components have their values managed by React state.  Changes are reflected in the state first, then updated in the DOM. Uncontrolled components rely on the DOM's internal state; React reads the values directly from the DOM when needed. Controlled components are generally preferred for better control and predictability.\"\n  },\n  {\n    \"question\": \"What are the benefits of using the Context API for state management in React?\",\n    \"answer\": \"The Context API provides a way to pass data through the component tree without prop drilling.  It's simpler than Redux for smaller applications, but lacks the advanced features like middleware and time-travel debugging.\"\n  },\n  {\n    \"question\": \"How do you handle form submission and validation in React?\",\n    \"answer\": \"Use controlled components to track form values in the state. Validation can be performed within the component using functions or external libraries, showing error messages based on the validation results.  Submission often involves preventing default behavior (`preventDefault`) and making API calls.\"\n  },\n  {\n    \"question\": \"Describe the role of React Router in building single-page applications (SPAs).\",\n    \"answer\": \"React Router enables navigation and routing within a React application. It allows for the creation of SPAs where different views (components) are rendered depending on the URL, enhancing the user experience without full page reloads.\"\n  },\n  {\n    \"question\": \"What are some common approaches to testing React components?\",\n    \"answer\": \"Common testing approaches include unit testing (testing individual components), integration testing (testing the interaction between components), and end-to-end testing (testing the entire application flow). Libraries like Jest and React Testing Library are widely used.\"\n  },\n  {\n    \"question\": \"How can you achieve advanced styling in React, beyond inline styles?\",\n    \"answer\": \"Options include using CSS Modules (for scoped styles), styled-components (for CSS-in-JS), or CSS frameworks like Material-UI or Bootstrap. Each has its own pros and cons regarding maintainability, organization, and performance.\"\n  },\n  {\n    \"question\": \"What are the advantages and disadvantages of using Redux for state management?\",\n    \"answer\": \"Advantages: predictable state updates, centralized state management, developer tools for debugging. Disadvantages: added complexity for smaller apps, steeper learning curve compared to Context API.\"\n  },\n  {\n    \"question\": \"Explain the process of deploying a React application to a hosting provider like Netlify or Vercel.\",\n    \"answer\": \"Generally involves building the application (creating the production-ready bundle), pushing the build artifacts to a Git repository, and then configuring the hosting provider to deploy from the repository.  Specific steps vary depending on the provider.\"\n  },\n  {\n    \"question\": \"How do you handle asynchronous operations (e.g., API calls) within React components?\",\n    \"answer\": \"Use asynchronous JavaScript features like `async/await` or promises.  Manage loading and error states within component state, updating the UI accordingly. Hooks like `useEffect` are frequently used to handle side effects like API calls.\"\n  },\n  {\n    \"question\": \"What are Higher-Order Components (HOCs) and how are they used?\",\n    \"answer\": \"HOCs are functions that take a component as an argument and return a new enhanced component.  They are used to reuse logic across multiple components, such as adding authentication or logging functionality.\"\n  },\n  {\n    \"question\": \"Describe the purpose of React Hooks like `useState` and `useEffect`.\",\n    \"answer\": \"`useState` is used to manage state within functional components.  `useEffect` is used to perform side effects like data fetching, subscriptions, or DOM manipulations.\"\n  },\n  {\n    \"question\": \"What is the difference between `props` and `state` in React?\",\n    \"answer\": \"Props are immutable data passed from a parent component to a child component. State is mutable data managed internally by a component to track changes and trigger re-renders.\"\n  },\n  {\n    \"question\": \"How can you optimize performance in a React application?\",\n    \"answer\": \"Techniques include memoization (`React.memo`), using keys effectively in lists, code splitting, lazy loading, and using virtualized lists for large datasets.\"\n  },\n  {\n    \"question\": \"Explain the concept of key prop in React lists.\",\n    \"answer\": \"The `key` prop helps React identify which items have changed, are added, or are removed in a list.  This is crucial for efficient updates and preventing unnecessary re-renders.\"\n  },\n  {\n    \"question\": \"How does React's virtual DOM contribute to performance?\",\n    \"answer\": \"The virtual DOM is a lightweight representation of the actual DOM. React compares changes in the virtual DOM before updating the actual DOM, minimizing direct manipulations and improving performance.\"\n  },\n  {\n    \"question\": \"What is the purpose of the `Fragment` component in React?\",\n    \"answer\": \"Fragments (`<> </>` or `<React.Fragment></React.Fragment>`) allow you to group multiple elements without adding extra nodes to the DOM. This is useful when returning multiple elements from a component.\"\n  },\n  {\n    \"question\": \"How do you handle error boundaries in React?\",\n    \"answer\": \"Error boundaries are components that catch JavaScript errors in their child component tree.  They can display a fallback UI instead of crashing the entire application.\"\n  },\n  {\n    \"question\": \"What are some common API call best practices in React?\",\n    \"answer\": \"Handle loading and error states, use appropriate HTTP methods, handle pagination for large datasets, implement caching mechanisms, and always validate API responses.\"\n  }\n]\n```\n"},
          ],
        },
      ],
    });
  // const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
  // console.log(result.response.text());